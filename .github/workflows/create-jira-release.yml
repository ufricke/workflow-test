name: create-jira-release
description: Create JIRA Release with tickets that have been part of the latest release.

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      jira-project-key:
        description: 'JIRA project key'
        required: true
        default: 'TEST'
        type: choice
        options:
        - TEST
        - EXP
      release-version:
        description: 'Release version, e.g. 22.3.4'
        required: true
        type: string
      previous-version:
        description: 'Previous release version, e.g. 22.3.3'
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:  
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Collect issue numbers since last release/tag
        run: |
          export LC_ALL=en_US.utf8
          git log ${{inputs.previous-version}}...${{inputs.release-version}} | \
            grep -oP "${{ inputs.jira-project-key }}-\d{1,}" | sort | uniq | \
            sed 's/^\|$/"/g' | paste -sd , | awk '{print "RELATED_JIRA_ISSUES="$0}' >> $GITHUB_ENV
        shell: bash --noprofile --norc {0} 

      - name: Create json and invoke webhook
        run: |
          $json = ConvertTo-Json @{issues = @(${{ env.RELATED_JIRA_ISSUES }}); data = @{version = "${{ inputs.release-version }}"; projectName = "${{ inputs.jira-project-key }}"}}
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          echo $json
        shell: pwsh
